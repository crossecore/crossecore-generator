

import java.text.SimpleDateFormat;

plugins {
  id "org.xtext.xtend" version "2.0.8"
  id 'jacoco'
  id "de.undercouch.download" version "4.0.4"
  //id 'de.jansauer.printcoverage' version '2.0.0'
  //id 'antlr'
  id "org.sonarqube" version "3.0"
}

def buildTime() {
    def df = new SimpleDateFormat("yyyyMMdd-HHmm") // you can change it
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

ext.versions = [
  emfGwt: '2.12.4',
  gwt:    '2.9.0',
  xtext:  '2.20.0',
]



sonarqube {
  properties {
    property "sonar.projectKey", "crossecore_crossecore-generator"
    property "sonar.organization", "crossecore"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.scm.disabled", "true"
    property "sonar.sources", "build/xtend/main"
    property "sonar.tests", "build/xtend/test"
    property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/report.xml"
  }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'


sourceSets {
    main {
        java {
            srcDir 'src'
        }

    }
    test{
        java{
            srcDir 'test'
        }
        //antlr.srcDirs = ['test/antlr']
    }

     
}



test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}





compileJava.options.encoding = "UTF-8"

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.crossecore.CrossEcore'
    }
    baseName = "crossecore-generator_${buildTime()}"
    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } 
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA' 
    with jar
}

def srcDir = "src"
def distDir = "${buildDir}/js"

def gwtModule = "com.crossecore.CrossEcore"

repositories.jcenter()

configurations {
    gwt
}

task downloadFiles(type: Download) {
    src([
        'https://raw.githubusercontent.com/antlr/grammars-v4/master/typescript/TypeScriptLexer.g4',
        'https://raw.githubusercontent.com/antlr/grammars-v4/master/typescript/TypeScriptParser.g4'
    ])
    dest new File("./test/antlr")
    overwrite true
}

def gwtClasspath = [
      // gwt requires the folder structure to equal the package structure
      "$srcDir",
      "$buildDir/xtend/main",
      sourceSets.main.output.classesDirs,

      configurations.gwt
    ]

dependencies {

	compile "org.eclipse.platform:org.eclipse.core.runtime:3.20.0"
	    
	compile "org.eclipse.xtext:org.eclipse.xtext.xbase.lib:$versions.xtext"
    compile "org.eclipse.xtext:org.eclipse.xtext:$versions.xtext"
    compile "org.eclipse.xtend:org.eclipse.xtend.lib.macro:$versions.xtext"

    compile "com.genmymodel.emf.gwt:emf-ecore:$versions.emfGwt:sources"
    compile "com.genmymodel.emf.gwt:emf-common:$versions.emfGwt:sources"
    compile "com.genmymodel.emf.gwt:emf-edit:$versions.emfGwt:sources"

    compile "com.google.gwt:gwt-user:$versions.gwt"
    compile "com.google.gwt:gwt-dev:$versions.gwt"

    testImplementation "junit:junit:4.13.1"
    testImplementation "org.antlr:antlr4-runtime:4.8"


    gwt "com.google.gwt:gwt:$versions.gwt"
    gwt "com.google.gwt:gwt-dev:$versions.gwt"
    gwt "com.google.gwt:gwt-user:$versions.gwt"
    //gwt "com.google.gwt:gwt-servlet:$versions.gwt"

    gwt "com.genmymodel.emf.gwt:emf-common:$versions.emfGwt:sources"
    gwt "com.genmymodel.emf.gwt:emf-ecore:$versions.emfGwt:sources"

    // the xtext/xtend gwt plugins only contain the '.gwt.xml' files
    // thus the source code has to be retrieved separately
    gwt "org.eclipse.xtext:org.eclipse.xtext.xbase.lib.gwt:$versions.xtext"
    gwt "org.eclipse.xtext:org.eclipse.xtext.xbase.lib:$versions.xtext:sources"
    gwt "org.eclipse.xtend:org.eclipse.xtend.lib.gwt:$versions.xtext"    
    gwt "org.eclipse.xtend:org.eclipse.xtend.lib:$versions.xtext:sources"
    gwt "org.eclipse.xtend:org.eclipse.xtend.lib.macro:$versions.xtext:sources"
    
}

def gwtInputs = [
  fileTree(srcDir),
  sourceSets.main.output.classesDirs
]

task gwtc (type: JavaExec) {
  main = 'com.google.gwt.dev.Compiler'
  classpath { gwtClasspath }
  args = [ gwtModule, '-war', "$buildDir/dist", '-style', 'PRETTY', '-logLevel', 'DEBUG' ]
  maxHeapSize = '2G'

  inputs.files(gwtInputs)
  outputs.dir("$buildDir/dist/js")
}

gwtc.dependsOn compileJava
